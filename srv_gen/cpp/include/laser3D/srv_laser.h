/* Auto-generated by genmsg_cpp for file /home/exbot/rosbuild_ws/sandbo/laser3D/srv/srv_laser.srv */
#ifndef LASER3D_SERVICE_SRV_LASER_H
#define LASER3D_SERVICE_SRV_LASER_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"



#include "sensor_msgs/PointCloud2.h"

namespace laser3D
{
template <class ContainerAllocator>
struct srv_laserRequest_ {
  typedef srv_laserRequest_<ContainerAllocator> Type;

  srv_laserRequest_()
  : positionSpeed(0)
  , measureSpeed(0)
  , initialPosition(0.0)
  , finalPosition(0.0)
  , anguloMin(0)
  , anguloMax(0)
  , rangoMin(0)
  , rangoMax(0)
  {
  }

  srv_laserRequest_(const ContainerAllocator& _alloc)
  : positionSpeed(0)
  , measureSpeed(0)
  , initialPosition(0.0)
  , finalPosition(0.0)
  , anguloMin(0)
  , anguloMax(0)
  , rangoMin(0)
  , rangoMax(0)
  {
  }

  typedef uint16_t _positionSpeed_type;
  uint16_t positionSpeed;

  typedef uint16_t _measureSpeed_type;
  uint16_t measureSpeed;

  typedef float _initialPosition_type;
  float initialPosition;

  typedef float _finalPosition_type;
  float finalPosition;

  typedef int64_t _anguloMin_type;
  int64_t anguloMin;

  typedef int64_t _anguloMax_type;
  int64_t anguloMax;

  typedef int64_t _rangoMin_type;
  int64_t rangoMin;

  typedef int64_t _rangoMax_type;
  int64_t rangoMax;


  typedef boost::shared_ptr< ::laser3D::srv_laserRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::laser3D::srv_laserRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct srv_laserRequest
typedef  ::laser3D::srv_laserRequest_<std::allocator<void> > srv_laserRequest;

typedef boost::shared_ptr< ::laser3D::srv_laserRequest> srv_laserRequestPtr;
typedef boost::shared_ptr< ::laser3D::srv_laserRequest const> srv_laserRequestConstPtr;



template <class ContainerAllocator>
struct srv_laserResponse_ {
  typedef srv_laserResponse_<ContainerAllocator> Type;

  srv_laserResponse_()
  : cloud()
  {
  }

  srv_laserResponse_(const ContainerAllocator& _alloc)
  : cloud(_alloc)
  {
  }

  typedef  ::sensor_msgs::PointCloud2_<ContainerAllocator>  _cloud_type;
   ::sensor_msgs::PointCloud2_<ContainerAllocator>  cloud;


  typedef boost::shared_ptr< ::laser3D::srv_laserResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::laser3D::srv_laserResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct srv_laserResponse
typedef  ::laser3D::srv_laserResponse_<std::allocator<void> > srv_laserResponse;

typedef boost::shared_ptr< ::laser3D::srv_laserResponse> srv_laserResponsePtr;
typedef boost::shared_ptr< ::laser3D::srv_laserResponse const> srv_laserResponseConstPtr;


struct srv_laser
{

typedef srv_laserRequest Request;
typedef srv_laserResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct srv_laser
} // namespace laser3D

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::laser3D::srv_laserRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::laser3D::srv_laserRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::laser3D::srv_laserRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "4a57d1e4b2f4c13fde59e56f5720e5c5";
  }

  static const char* value(const  ::laser3D::srv_laserRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x4a57d1e4b2f4c13fULL;
  static const uint64_t static_value2 = 0xde59e56f5720e5c5ULL;
};

template<class ContainerAllocator>
struct DataType< ::laser3D::srv_laserRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "laser3D/srv_laserRequest";
  }

  static const char* value(const  ::laser3D::srv_laserRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::laser3D::srv_laserRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint16 positionSpeed\n\
uint16 measureSpeed\n\
float32 initialPosition\n\
float32 finalPosition\n\
int64 anguloMin\n\
int64 anguloMax\n\
int64 rangoMin\n\
int64 rangoMax\n\
\n\
\n\
";
  }

  static const char* value(const  ::laser3D::srv_laserRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::laser3D::srv_laserRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::laser3D::srv_laserResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::laser3D::srv_laserResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::laser3D::srv_laserResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "96cec5374164b3b3d1d7ef5d7628a7ed";
  }

  static const char* value(const  ::laser3D::srv_laserResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x96cec5374164b3b3ULL;
  static const uint64_t static_value2 = 0xd1d7ef5d7628a7edULL;
};

template<class ContainerAllocator>
struct DataType< ::laser3D::srv_laserResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "laser3D/srv_laserResponse";
  }

  static const char* value(const  ::laser3D::srv_laserResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::laser3D::srv_laserResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "sensor_msgs/PointCloud2 cloud\n\
\n\
\n\
================================================================================\n\
MSG: sensor_msgs/PointCloud2\n\
# This message holds a collection of N-dimensional points, which may\n\
# contain additional information such as normals, intensity, etc. The\n\
# point data is stored as a binary blob, its layout described by the\n\
# contents of the \"fields\" array.\n\
\n\
# The point cloud data may be organized 2d (image-like) or 1d\n\
# (unordered). Point clouds organized as 2d images may be produced by\n\
# camera depth sensors such as stereo or time-of-flight.\n\
\n\
# Time of sensor data acquisition, and the coordinate frame ID (for 3d\n\
# points).\n\
Header header\n\
\n\
# 2D structure of the point cloud. If the cloud is unordered, height is\n\
# 1 and width is the length of the point cloud.\n\
uint32 height\n\
uint32 width\n\
\n\
# Describes the channels and their layout in the binary data blob.\n\
PointField[] fields\n\
\n\
bool    is_bigendian # Is this data bigendian?\n\
uint32  point_step   # Length of a point in bytes\n\
uint32  row_step     # Length of a row in bytes\n\
uint8[] data         # Actual point data, size is (row_step*height)\n\
\n\
bool is_dense        # True if there are no invalid points\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: sensor_msgs/PointField\n\
# This message holds the description of one point entry in the\n\
# PointCloud2 message format.\n\
uint8 INT8    = 1\n\
uint8 UINT8   = 2\n\
uint8 INT16   = 3\n\
uint8 UINT16  = 4\n\
uint8 INT32   = 5\n\
uint8 UINT32  = 6\n\
uint8 FLOAT32 = 7\n\
uint8 FLOAT64 = 8\n\
\n\
string name      # Name of field\n\
uint32 offset    # Offset from start of point struct\n\
uint8  datatype  # Datatype enumeration, see above\n\
uint32 count     # How many elements in the field\n\
\n\
";
  }

  static const char* value(const  ::laser3D::srv_laserResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::laser3D::srv_laserRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.positionSpeed);
    stream.next(m.measureSpeed);
    stream.next(m.initialPosition);
    stream.next(m.finalPosition);
    stream.next(m.anguloMin);
    stream.next(m.anguloMax);
    stream.next(m.rangoMin);
    stream.next(m.rangoMax);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct srv_laserRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::laser3D::srv_laserResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.cloud);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct srv_laserResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<laser3D::srv_laser> {
  static const char* value() 
  {
    return "d5cf0661b99b7c01f73b9beb405351dc";
  }

  static const char* value(const laser3D::srv_laser&) { return value(); } 
};

template<>
struct DataType<laser3D::srv_laser> {
  static const char* value() 
  {
    return "laser3D/srv_laser";
  }

  static const char* value(const laser3D::srv_laser&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<laser3D::srv_laserRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d5cf0661b99b7c01f73b9beb405351dc";
  }

  static const char* value(const laser3D::srv_laserRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<laser3D::srv_laserRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "laser3D/srv_laser";
  }

  static const char* value(const laser3D::srv_laserRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<laser3D::srv_laserResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d5cf0661b99b7c01f73b9beb405351dc";
  }

  static const char* value(const laser3D::srv_laserResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<laser3D::srv_laserResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "laser3D/srv_laser";
  }

  static const char* value(const laser3D::srv_laserResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // LASER3D_SERVICE_SRV_LASER_H

