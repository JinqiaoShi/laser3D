/* Auto-generated by genmsg_cpp for file /home/exbot/rosbuild_ws/sandbo/laser3D/srv/srv_hokuyo.srv */
#ifndef LASER3D_SERVICE_SRV_HOKUYO_H
#define LASER3D_SERVICE_SRV_HOKUYO_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace laser3D
{
template <class ContainerAllocator>
struct srv_hokuyoRequest_ {
  typedef srv_hokuyoRequest_<ContainerAllocator> Type;

  srv_hokuyoRequest_()
  : option(0)
  , anguloMax(0)
  , anguloMin(0)
  {
  }

  srv_hokuyoRequest_(const ContainerAllocator& _alloc)
  : option(0)
  , anguloMax(0)
  , anguloMin(0)
  {
  }

  typedef int64_t _option_type;
  int64_t option;

  typedef uint16_t _anguloMax_type;
  uint16_t anguloMax;

  typedef uint16_t _anguloMin_type;
  uint16_t anguloMin;


  typedef boost::shared_ptr< ::laser3D::srv_hokuyoRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::laser3D::srv_hokuyoRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct srv_hokuyoRequest
typedef  ::laser3D::srv_hokuyoRequest_<std::allocator<void> > srv_hokuyoRequest;

typedef boost::shared_ptr< ::laser3D::srv_hokuyoRequest> srv_hokuyoRequestPtr;
typedef boost::shared_ptr< ::laser3D::srv_hokuyoRequest const> srv_hokuyoRequestConstPtr;



template <class ContainerAllocator>
struct srv_hokuyoResponse_ {
  typedef srv_hokuyoResponse_<ContainerAllocator> Type;

  srv_hokuyoResponse_()
  : feedback()
  {
  }

  srv_hokuyoResponse_(const ContainerAllocator& _alloc)
  : feedback(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _feedback_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  feedback;


  typedef boost::shared_ptr< ::laser3D::srv_hokuyoResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::laser3D::srv_hokuyoResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct srv_hokuyoResponse
typedef  ::laser3D::srv_hokuyoResponse_<std::allocator<void> > srv_hokuyoResponse;

typedef boost::shared_ptr< ::laser3D::srv_hokuyoResponse> srv_hokuyoResponsePtr;
typedef boost::shared_ptr< ::laser3D::srv_hokuyoResponse const> srv_hokuyoResponseConstPtr;


struct srv_hokuyo
{

typedef srv_hokuyoRequest Request;
typedef srv_hokuyoResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct srv_hokuyo
} // namespace laser3D

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::laser3D::srv_hokuyoRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::laser3D::srv_hokuyoRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::laser3D::srv_hokuyoRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a11a1c3beae559e888dab37a2fb0d0e6";
  }

  static const char* value(const  ::laser3D::srv_hokuyoRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xa11a1c3beae559e8ULL;
  static const uint64_t static_value2 = 0x88dab37a2fb0d0e6ULL;
};

template<class ContainerAllocator>
struct DataType< ::laser3D::srv_hokuyoRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "laser3D/srv_hokuyoRequest";
  }

  static const char* value(const  ::laser3D::srv_hokuyoRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::laser3D::srv_hokuyoRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int64 option\n\
uint16 anguloMax\n\
uint16 anguloMin\n\
\n\
";
  }

  static const char* value(const  ::laser3D::srv_hokuyoRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::laser3D::srv_hokuyoRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::laser3D::srv_hokuyoResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::laser3D::srv_hokuyoResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::laser3D::srv_hokuyoResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c14cdf907e5c7c7fd47292add15660f0";
  }

  static const char* value(const  ::laser3D::srv_hokuyoResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xc14cdf907e5c7c7fULL;
  static const uint64_t static_value2 = 0xd47292add15660f0ULL;
};

template<class ContainerAllocator>
struct DataType< ::laser3D::srv_hokuyoResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "laser3D/srv_hokuyoResponse";
  }

  static const char* value(const  ::laser3D::srv_hokuyoResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::laser3D::srv_hokuyoResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string feedback\n\
\n\
\n\
";
  }

  static const char* value(const  ::laser3D::srv_hokuyoResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::laser3D::srv_hokuyoRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.option);
    stream.next(m.anguloMax);
    stream.next(m.anguloMin);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct srv_hokuyoRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::laser3D::srv_hokuyoResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.feedback);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct srv_hokuyoResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<laser3D::srv_hokuyo> {
  static const char* value() 
  {
    return "48336f725d274fc7ff2ad04d604a6602";
  }

  static const char* value(const laser3D::srv_hokuyo&) { return value(); } 
};

template<>
struct DataType<laser3D::srv_hokuyo> {
  static const char* value() 
  {
    return "laser3D/srv_hokuyo";
  }

  static const char* value(const laser3D::srv_hokuyo&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<laser3D::srv_hokuyoRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "48336f725d274fc7ff2ad04d604a6602";
  }

  static const char* value(const laser3D::srv_hokuyoRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<laser3D::srv_hokuyoRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "laser3D/srv_hokuyo";
  }

  static const char* value(const laser3D::srv_hokuyoRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<laser3D::srv_hokuyoResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "48336f725d274fc7ff2ad04d604a6602";
  }

  static const char* value(const laser3D::srv_hokuyoResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<laser3D::srv_hokuyoResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "laser3D/srv_hokuyo";
  }

  static const char* value(const laser3D::srv_hokuyoResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // LASER3D_SERVICE_SRV_HOKUYO_H

