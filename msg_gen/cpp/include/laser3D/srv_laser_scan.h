/* Auto-generated by genmsg_cpp for file /home/exbot/rosbuild_ws/sandbo/laser3D/msg/srv_laser_scan.msg */
#ifndef LASER3D_MESSAGE_SRV_LASER_SCAN_H
#define LASER3D_MESSAGE_SRV_LASER_SCAN_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "sensor_msgs/LaserScan.h"

namespace laser3D
{
template <class ContainerAllocator>
struct srv_laser_scan_ {
  typedef srv_laser_scan_<ContainerAllocator> Type;

  srv_laser_scan_()
  : hokuyo_scan()
  {
  }

  srv_laser_scan_(const ContainerAllocator& _alloc)
  : hokuyo_scan(_alloc)
  {
  }

  typedef  ::sensor_msgs::LaserScan_<ContainerAllocator>  _hokuyo_scan_type;
   ::sensor_msgs::LaserScan_<ContainerAllocator>  hokuyo_scan;


  typedef boost::shared_ptr< ::laser3D::srv_laser_scan_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::laser3D::srv_laser_scan_<ContainerAllocator>  const> ConstPtr;
}; // struct srv_laser_scan
typedef  ::laser3D::srv_laser_scan_<std::allocator<void> > srv_laser_scan;

typedef boost::shared_ptr< ::laser3D::srv_laser_scan> srv_laser_scanPtr;
typedef boost::shared_ptr< ::laser3D::srv_laser_scan const> srv_laser_scanConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::laser3D::srv_laser_scan_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::laser3D::srv_laser_scan_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace laser3D

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::laser3D::srv_laser_scan_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::laser3D::srv_laser_scan_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::laser3D::srv_laser_scan_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f643de06510a3a2cecb59ae491092270";
  }

  static const char* value(const  ::laser3D::srv_laser_scan_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xf643de06510a3a2cULL;
  static const uint64_t static_value2 = 0xecb59ae491092270ULL;
};

template<class ContainerAllocator>
struct DataType< ::laser3D::srv_laser_scan_<ContainerAllocator> > {
  static const char* value() 
  {
    return "laser3D/srv_laser_scan";
  }

  static const char* value(const  ::laser3D::srv_laser_scan_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::laser3D::srv_laser_scan_<ContainerAllocator> > {
  static const char* value() 
  {
    return "sensor_msgs/LaserScan hokuyo_scan\n\
\n\
================================================================================\n\
MSG: sensor_msgs/LaserScan\n\
# Single scan from a planar laser range-finder\n\
#\n\
# If you have another ranging device with different behavior (e.g. a sonar\n\
# array), please find or create a different message, since applications\n\
# will make fairly laser-specific assumptions about this data\n\
\n\
Header header            # timestamp in the header is the acquisition time of \n\
                         # the first ray in the scan.\n\
                         #\n\
                         # in frame frame_id, angles are measured around \n\
                         # the positive Z axis (counterclockwise, if Z is up)\n\
                         # with zero angle being forward along the x axis\n\
                         \n\
float32 angle_min        # start angle of the scan [rad]\n\
float32 angle_max        # end angle of the scan [rad]\n\
float32 angle_increment  # angular distance between measurements [rad]\n\
\n\
float32 time_increment   # time between measurements [seconds] - if your scanner\n\
                         # is moving, this will be used in interpolating position\n\
                         # of 3d points\n\
float32 scan_time        # time between scans [seconds]\n\
\n\
float32 range_min        # minimum range value [m]\n\
float32 range_max        # maximum range value [m]\n\
\n\
float32[] ranges         # range data [m] (Note: values < range_min or > range_max should be discarded)\n\
float32[] intensities    # intensity data [device-specific units].  If your\n\
                         # device does not provide intensities, please leave\n\
                         # the array empty.\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::laser3D::srv_laser_scan_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::laser3D::srv_laser_scan_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.hokuyo_scan);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct srv_laser_scan_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::laser3D::srv_laser_scan_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::laser3D::srv_laser_scan_<ContainerAllocator> & v) 
  {
    s << indent << "hokuyo_scan: ";
s << std::endl;
    Printer< ::sensor_msgs::LaserScan_<ContainerAllocator> >::stream(s, indent + "  ", v.hokuyo_scan);
  }
};


} // namespace message_operations
} // namespace ros

#endif // LASER3D_MESSAGE_SRV_LASER_SCAN_H

