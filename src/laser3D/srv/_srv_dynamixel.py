"""autogenerated by genpy from laser3D/srv_dynamixelRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class srv_dynamixelRequest(genpy.Message):
  _md5sum = "571068c8e4ed10374bfb78fabccaf952"
  _type = "laser3D/srv_dynamixelRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32 position_i
uint16 speed

"""
  __slots__ = ['position_i','speed']
  _slot_types = ['float32','uint16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       position_i,speed

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(srv_dynamixelRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.position_i is None:
        self.position_i = 0.
      if self.speed is None:
        self.speed = 0
    else:
      self.position_i = 0.
      self.speed = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_fH.pack(_x.position_i, _x.speed))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 6
      (_x.position_i, _x.speed,) = _struct_fH.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_fH.pack(_x.position_i, _x.speed))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 6
      (_x.position_i, _x.speed,) = _struct_fH.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_fH = struct.Struct("<fH")
"""autogenerated by genpy from laser3D/srv_dynamixelResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class srv_dynamixelResponse(genpy.Message):
  _md5sum = "2d4afb0fea9fbc4c462fcc20f49f52ac"
  _type = "laser3D/srv_dynamixelResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32 position_o
uint16 work
uint16 comm



"""
  __slots__ = ['position_o','work','comm']
  _slot_types = ['float32','uint16','uint16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       position_o,work,comm

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(srv_dynamixelResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.position_o is None:
        self.position_o = 0.
      if self.work is None:
        self.work = 0
      if self.comm is None:
        self.comm = 0
    else:
      self.position_o = 0.
      self.work = 0
      self.comm = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_f2H.pack(_x.position_o, _x.work, _x.comm))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.position_o, _x.work, _x.comm,) = _struct_f2H.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_f2H.pack(_x.position_o, _x.work, _x.comm))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.position_o, _x.work, _x.comm,) = _struct_f2H.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_f2H = struct.Struct("<f2H")
class srv_dynamixel(object):
  _type          = 'laser3D/srv_dynamixel'
  _md5sum = '69076158aca1b0bc98d7a49fe2858405'
  _request_class  = srv_dynamixelRequest
  _response_class = srv_dynamixelResponse
